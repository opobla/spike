<title>Hello Ext</title>
<link rel="stylesheet" type="text/css" href="/home/hristo/extjs/resources/css/ext-all.css" />
<script type="text/javascript" src="/home/hristo/extjs/ext-all.js"></script>

<script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
<script src="http://code.highcharts.com/stock/highstock.js"></script>
<script src="http://code.highcharts.com/stock/modules/exporting.js"></script>

<body></body>
<script> 
var myVp = Ext.create('Ext.container.Viewport', {
	requires: [
        'Ext.panel.Panel',
        'Ext.button.Button',
		'Ext.button.Split',
		'Ext.menu.Menu'
    ],
	height: 1200,
	width: 1300,
	layout: {
            type: 'vbox',
            align: 'stretch'
    },
    items: [{
		xtype: 'panel',
		title: 'Hi There spikes',
		itemId: 'ControlPanel',
		flex: 2,
		border: false,
		layout: {
            type: 'hbox',
            align: 'stretch'
    	},
		items: [{
			xtype: 'button',
			flex: 1,
			margin: '0 0 5 5',
			text: 'Choice a Graphics',
			menu: {
				xtype: 'menu',
                width: 120,
                items: [
                    {
                        xtype: 'menuitem',
                        text: 'Graph1',
						handler: function() {
							alert('Graph1 Selected');
							myVp.down('#Graph1').items=[];
						}
                    },
                    {
                        xtype: 'menuitem',
                        text: 'Graph2',
						handler: function() {
							alert('Graph2 Selected');
						}
                    },
                    {
                        xtype: 'menuitem',
                        text: 'Graph3',
						handler: function() {
							alert('Graph3 Selected');
						}
                    }
                ]
			}
		},{
			xtype: 'datefield',
            margin: '0 0 0 10',
			itemId: 'datefrom',
            fieldLabel: 'Date From',
            format: 'Y-m-d'
		},{
			xtype: 'timefield',
            margin: '0 0 0 10',
			itemId: 'timefrom',
            fieldLabel: '',
            format: 'H:i:s'
		},{
            xtype: 'datefield',
			margin: '0 0 0 0',
			itemId: 'dateto',
            fieldLabel: 'Date To:',
            format: 'Y-m-d'
        },
        {
            xtype: 'timefield',
            margin: '0 0 0 10',
			itemId: 'timeto',
            fieldLabel: '',
            format: 'H:i:s'
        },{
			xtype: 'button',
			flex: 1,
			handler: function() {
				chart1.xAxis[0].setExtremes(
					getTimestamp(myVp.down('#ControlPanel').down('#datefrom').getRawValue()+' '+myVp.down('#ControlPanel').down('#timefrom').getRawValue()),
					getTimestamp(myVp.down('#ControlPanel').down('#dateto').getRawValue()+' '+myVp.down('#ControlPanel').down('#timeto').getRawValue()));
			},
			margin: '0 15 5 10',
			text: 'Search',
		}]	
	},{
		xtype: 'panel',
		border: false,
		layout: {
            type: 'hbox',
            align: 'stretch'
   		},
		flex: 1,
        items: [{
			xtype: 'button',
			flex: 1,
			margin: '0 10 5 10',
			handler: function() {
				if (!IsUncorrected){
					IsUncorrected = true;	IsCorrPress = false;	IsCorrEffic = false;
					chart1.series[0].setData([]);
					chart1.series[1].setData([]);
					chart1.series[2].setData([]);
					chart1.series[3].setData([]);
					chart1.series[4].setData([]);
					chart1.series[5].setData([]);
					if(IsCandel){
						chart1.series[0].setData(data1[0]);
						chart1.series[1].setData([]);
					}else{
						chart1.series[0].setData([]);
						chart1.series[1].setData(data1[0]);
					}	
					
				}
			},
			text: 'Uncorrected'	
		},{
			xtype: 'button',
			flex: 1,
			margin: '0 10 5 10',
			handler: function() {
				if (!IsCorrPress){
					IsUncorrected = false;	IsCorrPress = true;	IsCorrEffic = false;
					chart1.series[0].setData([]);
					chart1.series[1].setData([]);
					chart1.series[2].setData([]);
					chart1.series[3].setData([]);
					chart1.series[4].setData([]);
					chart1.series[5].setData([]);
					if(IsCandel){
						chart1.series[2].setData(data1[1]);
						chart1.series[3].setData([]);
					}else{
						chart1.series[2].setData([]);
						chart1.series[3].setData(data1[1]);
					}	
				}
			},
			text: 'Corrected for Pressure'	
		},{
			xtype: 'button',
			flex: 1,
			margin: '0 25 5 10',
			handler: function() {
				if (!IsCorrEffic){
					IsUncorrected = false;	IsCorrPress = false;	IsCorrEffic = true;
					chart1.series[0].setData([]);
					chart1.series[1].setData([]);
					chart1.series[2].setData([]);
					chart1.series[3].setData([]);
					chart1.series[4].setData([]);
					chart1.series[5].setData([]);
					if(IsCandel){
						chart1.series[4].setData(data1[2]);
						chart1.series[5].setData([]);
					}else{
						chart1.series[4].setData([]);
						chart1.series[5].setData(data1[2]);
					}					
				}
			},
			text: 'Corrected for Efficiency'	
		}]
	},{
        xtype: 'panel',
		border: false,
		layout: {
            type: 'vbox',
            align: 'stretch'
   		},
		flex: 24,
        items: [{
			flex: 8,
            xtype : "component",
			itemId: 'Graph1'
       	}]
	}]
});

$(function() {
    $.getJSON('http://localhost/apiv1/CALM/nmdb/CALM_ori/allHS/'+N_points+'?callback=?', function(data) {            
		 
		data1=data;
		data[0] = [].concat(data[0], [[Date.now(), null, null, null, null]]);  
		debugger;     
		// Create the chart[]
        chart1 = new Highcharts.StockChart({
            chart: {
                renderTo: myVp.down('#Graph1').getEl().dom,

                zoomType: 'x'
            },
    
            rangeSelector: {
                buttons: [{
                    type: 'all',
                    text: 'All'
                }],
                selected: 0,
				inputEnabled: false
            },
           
			xAxis : {
				events : {
					afterSetExtremes : afterSetExtremes,
				},
				minRange: 2*N_points/*one Min*/*60*1000,
				ordinal: false,
			},

			navigator : {
				adaptToUpdatedData: false,
				series : {
					data : data[0]
				}
			},

			yAxis : [{
				title: {
                    text: 'OHLC'
                }, 
				events : {
					afterSetExtremes : function(e){alert(e.max);},
				},
				top: 150,
				height: 365,
				min: 20,
				max: 250
			},{
				title: {
                    text: 'Presure'
                },
				height: 100,
				offset: 0,
				min: 880,
				max: 980
			}],

			plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                },
            },

            series:  [{
				name : 'Uncorrected',           	//0
				type : 'candlestick',
				data : data[0],
				dataGrouping: {
					enabled: false
				}
			},{
				name : 'Uncorrected',				//1
				data : null,
				dataGrouping: {
					enabled: false
				}
			},{
				name : 'Corrected for Pressure',	//2
				type : 'candlestick',
				data : null,
				dataGrouping: {
					enabled: false
				}
			},{
				name : 'Corrected for Pressure',	//3
				data : null,
				dataGrouping: {
					enabled: false
				}
			},{
				name : 'Corrected for Efficiency',	//4
				type : 'candlestick',
				data : null,
				dataGrouping: {
					enabled: false
				}
			},{
				name : 'Corrected for Efficiency',	//5
				data : null,
				dataGrouping: {
					enabled: false
				}
			},{
				name : 'Pressure',					//6
				visible : true,
				yAxis: 1,
				data : data[3],
				dataGrouping: {
					enabled: false
				}
			}]
    
        });
   });
});
/////////////////////////
///Vars//////////////////
var N_points=350;
var chart1;
var IsUncorrected = true;   
var IsCorrPress = false;
var IsCorrEffic = false;
var IsCandel = true;
var data1;
///Vars//////////////////
/////////////////////////

function afterSetExtremes(e) {

	//alert('Maximo: '+e.max+' Minimo: '+e.min);
	var currentExtremes = this.getExtremes(),
		range = e.max - e.min,
		chart = chart1;


	chart.showLoading('Loading data from server...');
	if ((Math.round(e.max/1000)-Math.round(e.min/1000))/60<=N_points*4+4){	
		$.getJSON('http://localhost/apiv1/CALM/nmdb/CALM_ori/intervalHS/'+Math.round(e.min/1000)+'/'+Math.round(e.max/1000)+'/'+N_points+'?callback=?', function(data) {

			data1=data;
			IsCandel = false;
			chart.series[0].setData([]);
			chart.series[1].setData([]);
			chart.series[2].setData([]);
			chart.series[3].setData([]);
			chart.series[4].setData([]);
			chart.series[5].setData([]);
			if (IsUncorrected){		
				chart.series[0].setData([]);
				chart.series[1].setData(data[0]);
			}
			if (IsCorrPress){
				chart.series[2].setData([]);
				chart.series[3].setData(data[1]);
			}
			if (IsCorrEffic){
				chart.series[4].setData([]);
				chart.series[5].setData(data[2]);
			}
			chart.series[6].setData(data[3]);

			chart.hideLoading();
			chart.hideLoading();
		});
	}else{
		$.getJSON('http://localhost/apiv1/CALM/nmdb/CALM_ori/intervalHSGrouped/'+Math.round(e.min/1000)+'/'+Math.round(e.max/1000)+'/'+N_points+'?callback=?', function(data) {
			
			data1=data;
			IsCandel = true;
			chart.series[0].setData([]);
			chart.series[1].setData([]);
			chart.series[2].setData([]);
			chart.series[3].setData([]);
			chart.series[4].setData([]);
			chart.series[5].setData([]);	
		
			if (IsUncorrected){
				chart.series[0].setData(data[0]);
				chart.series[1].setData([]);
			}
			if (IsCorrPress){			
				chart.series[2].setData(data[1]);
				chart.series[3].setData([]);
			}
			if (IsCorrEffic){
				chart.series[4].setData(data[2]);
				chart.series[5].setData([]);
			}
			chart.series[6].setData(data[3]);

			chart.hideLoading();
			chart.hideLoading();
		});
	}	
	
}


function getTimestamp(str) {
  var d = str.match(/\d+/g); //extract date parts
  return +new Date(d[0], d[1] - 1, d[2], d[3], d[4], d[5]); //build Date object
}
</script>
