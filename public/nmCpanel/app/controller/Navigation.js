/*
 * File: app/controller/Navigation.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Navigation', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.History'
    ],

    refs: [
        {
            ref: 'SpikeChartPanel',
            selector: '#SpikeChartPanel'
        },
        {
            ref: 'SpikeChart2Panel',
            selector: '#SpikeChart2Panel'
        },
        {
            ref: 'SpikeStatPanel',
            selector: '#SpikeStatPanel'
        },
        {
            ref: 'OtherModulePanel',
            selector: '#OtherModulePanel'
        },
        {
            ref: 'navigationPanel',
            selector: '#NavigationPanel'
        }
    ],

    onLaunch: function() {
        Ext.History.init();

        Ext.History.on('change',function (hash){
            aux=hash.split('/');

            switch(aux[0]){
                case 'SpikeChart':
                    this.getNavigationPanel().getLayout().setActiveItem(this.getSpikeChartPanel());
                        switch(aux[1]){
                            case undefined:
                                break;
                            case 'Uncorrected':
                                this.showUncorrected();
                                break;
                            case 'Pressure':
                                this.showPressure();
                                break;
                            case 'Efficiency':
                                this.showEfficiency();
                                break;
                            default:
                                console.log('Chart--> '+hash);
                        }
                    break;
                case 'SpikeChart2':
                    Ext.ComponentQuery.query('#Controls')[0].down('#SpikeControls').down('#SpikeIntervalSearch').hide(true);

                    this.getNavigationPanel().getLayout().setActiveItem(this.getSpikeChart2Panel());
                        MyApp.app.chart2.showLoading('Loading data from server...');
                        Ext.Ajax.request({
                            url: 'http://localhost/apiv1/CALM/nmdadb/binTable/intervalHS/'+Math.round(MyApp.app.chart.xAxis[0].min/1000)+'/'+Math.round(MyApp.app.chart.xAxis[0].max/1000),
                            success: function(response){
                                var text = response.responseText;
                                data=Ext.JSON.decode(text);

                                for (var i=0;i<=17;i++){
                                    MyApp.app.chart2.series[i].setData(data[i]);
                                }

                                MyApp.app.chart2.hideLoading();
                                MyApp.app.chart2.hideLo$ading();

                            },
                            scope: this
                        });
                    break;
                case 'SpikeStat':
                    this.getNavigationPanel().getLayout().setActiveItem(this.getSpikeStatPanel());
                    break;
                case 'OtherModule':
                    this.getNavigationPanel().getLayout().setActiveItem(this.getOtherModulePanel());
                    var panel=this.getNavigationPanel().down('#ChartHalf');
                    var N_points=Math.round(panel.getWidth()/4);

                            if (MyApp.app.chart3){}else{

                    Ext.Ajax.request({
                        url: 'http://localhost/apiv1/CALM/nmdb/CALM_rev/allHS/'+ N_points,
                        success: function(response){
                            var text = response.responseText;
                            data=Ext.JSON.decode(text);
                            data[0] = [].concat(data[0], [[Date.now(), null, null, null, null]]);

                            MyApp.app.data2=data;

                                var Letter = 65;//ASCII-->A
                                MyApp.app.chart3 = new Highcharts.StockChart({
                                            chart: {
                                                renderTo: panel.getEl().dom,

                                                zoomType: 'x'
                                            },

                                            title: {
                                                text: 'Spike Correction Tool'
                                            },

                                            global: {
                                                useUTC: true
                                            },

                                            rangeSelector: {
                                                buttons: [{
                                                    type: 'month',
                                                    count: 1,
                                                    text: '1m'
                                                },{
                                                    type: 'all',
                                                    text: 'All'
                                                }],
                                                selected: 1,
                                                inputEnabled: false
                                            },

                                            xAxis : {
                                                events : {
                                                    afterSetExtremes : function(event){
                                                        MyApp.app.chart3.showLoading('Loading data from server...');

                                                        if ((Math.round(event.max/1000)-Math.round(event.min/1000))/60<=N_points*4+4){
                                                            Ext.Ajax.request({
                                                                url: 'http://localhost/apiv1/CALM/nmdb/CALM_rev/intervalHS/'+Math.round(event.min/1000)+'/'+Math.round(event.max/1000)+'/'+N_points,
                                                                success: function(response){
                                                                    var text = response.responseText;
                                                                    data=Ext.JSON.decode(text);
                                                                    MyApp.app.data2=data;
                                                                    MyApp.app.IsCandle = false;
                                                                    Ext.ComponentQuery.query('#Chart2Button')[0].enable(true);
                                                                    MyApp.app.chart3.series[0].setData([]);
                                                                    MyApp.app.chart3.series[1].setData([]);
                                                                    MyApp.app.chart3.series[2].setData([]);
                                                                    MyApp.app.chart3.series[3].setData([]);
                                                                    MyApp.app.chart3.series[4].setData([]);
                                                                    MyApp.app.chart3.series[5].setData([]);
                                                                    if (MyApp.app.IsUncorrected){
                                                                        MyApp.app.chart3.series[0].setData([]);
                                                                        MyApp.app.chart3.series[1].setData(data[0]);
                                                                    }
                                                                    if (MyApp.app.IsCorrPress){
                                                                        MyApp.app.chart3.series[2].setData([]);
                                                                        MyApp.app.chart3.series[3].setData(data[1]);
                                                                    }
                                                                    if (MyApp.app.IsCorrEffic){
                                                                        MyApp.app.chart3.series[4].setData([]);
                                                                        MyApp.app.chart3.series[5].setData(data[2]);
                                                                    }
                                                                    MyApp.app.chart3.series[6].setData(data[3]);

                                                                    MyApp.app.chart3.hideLoading();
                                                                    MyApp.app.chart3.hideLoading();

                                                                },
                                                                scope: this
                                                            });

                                                        }else{
                                                            Ext.Ajax.request({
                                                                url:'http://localhost/apiv1/CALM/nmdb/CALM_rev/intervalHSGrouped/'+Math.round(event.min/1000)+'/'+Math.round(event.max/1000)+'/'+N_points,
                                                                success: function(response){
                                                                    var text = response.responseText;
                                                                    data=Ext.JSON.decode(text);
                                                                    MyApp.app.data2=data;
                                                                    MyApp.app.IsCandle = true;
                                                                    Ext.ComponentQuery.query('#Chart2Button')[0].disable(true);
                                                                    MyApp.app.chart3.series[0].setData([]);
                                                                    MyApp.app.chart3.series[1].setData([]);
                                                                    MyApp.app.chart3.series[2].setData([]);
                                                                    MyApp.app.chart3.series[3].setData([]);
                                                                    MyApp.app.chart3.series[4].setData([]);
                                                                    MyApp.app.chart3.series[5].setData([]);

                                                                    if (MyApp.app.IsUncorrected){
                                                                        MyApp.app.chart3.series[0].setData(data[0]);
                                                                        MyApp.app.chart3.series[1].setData([]);
                                                                    }
                                                                    if (MyApp.app.IsCorrPress){
                                                                        MyApp.app.chart3.series[2].setData(data[1]);
                                                                        MyApp.app.chart3.series[3].setData([]);
                                                                    }
                                                                    if (MyApp.app.IsCorrEffic){
                                                                        MyApp.app.chart3.series[4].setData(data[2]);
                                                                        MyApp.app.chart3.series[5].setData([]);
                                                                    }
                                                                    MyApp.app.chart3.series[6].setData(data[3]);

                                                                    MyApp.app.chart3.hideLoading();
                                                                    MyApp.app.chart3.hideLoading();
                                                                },
                                                                scope: this
                                                            });
                                                        }


                                                    }
                                                },
                                                minRange: 1*(N_points)/*one Min*/*60*1000,
                                                ordinal: false,id:'ftf'
                                            },

                                            navigator : {
                                                adaptToUpdatedData: false,
                                                series : {
                                                    data : data[0]
                                                }
                                            },

                                            scrollbar: {
                                                liveRedraw: false
                                            },

                                            yAxis : [{
                                                title: {
                                                    text: 'OHLC'
                                                },
                                                events : {
                                                    afterSetExtremes : function(e){alert(e.max);}
                                                },
                                                top: 150,
                                                height: 365,
                                                min: 20,
                                                max: 251
                                            },{
                                                title: {
                                                    text: 'Presure'
                                                },
                                                height: 100,
                                                offset: 0,
                                                min: 880,
                                                max: 980
                                            }],

                                            plotOptions: {
                                                column: {
                                                    pointPadding: 0.2,
                                                    borderWidth: 0
                                                }
                                            },

                                            series:  [{
                                                name : 'Uncorrected',				//0
                                                type : 'candlestick',
                                                data : data[0],
                                                dataGrouping: {
                                                    enabled: false
                                                }
                                            },{
                                                name : 'Uncorrected',				//1
                                                marker : {
                                                    enabled : true,
                                                    radius : 1
                                                },
                                                data : null,
                                                id: 'Unc',
                                                events: {
                                                    click: function(event) {
                                                        for (var i=0;i<MyApp.app.data[0].length;i++){
                                                            if (MyApp.app.data2[0][i][0]==event.point.x){
                                                                break;
                                                            }
                                                        }
                                                        var ClickedData=[data[0][i][0] , data[0][i][1] , data[1][i][1], data[2][i][1] , data[3][i][1]];
                                                        MyApp.app.chart3.series[7].addPoint({x:event.point.x,title:String.fromCharCode(Letter)});

                                                        MyApp.app.chart3.redraw();

                                                        //debugger;
                                                        a=Ext.ComponentQuery.query('#OtherModulePanel')[0].items.items[1].items.items[1].items.items[0];
                                                        a.store.add({	"label": String.fromCharCode(Letter),
                                                                        "start_date_time": new Date(ClickedData[0]+new Date(ClickedData[0]).getTimezoneOffset()*60*1000),
                                                                        "un": ClickedData[1],
                                                                        "ce": ClickedData[2],
                                                                        "cp": ClickedData[3],
                                                                        "pr": ClickedData[4],
                                                                        "ver": 0});
                                                        Letter+=1;
                                                    }
                                                },
                                                dataGrouping: {
                                                    enabled: false
                                                }
                                            },{
                                                name : 'Corrected for Pressure',	//2
                                                type : 'candlestick',
                                                data : null,
                                                dataGrouping: {
                                                    enabled: false
                                                }
                                            },{
                                                name : 'Corrected for Pressure',	//3
                                                data : null,
                                                dataGrouping: {
                                                    enabled: false
                                                }
                                            },{
                                                name : 'Corrected for Efficiency',	//4
                                                type : 'candlestick',
                                                data : null,
                                                dataGrouping: {
                                                    enabled: false
                                                }
                                            },{
                                                name : 'Corrected for Efficiency',	//5
                                                data : null,
                                                dataGrouping: {
                                                    enabled: false
                                                }
                                            },{
                                                name : 'Pressure',					//6
                                                visible : true,
                                                yAxis: 1,
                                                data : data[3],
                                                dataGrouping: {
                                                    enabled: false
                                                }
                                            },{
                                                name : 'Flags',                    //7
                                                type: 'flags',
                                                data: null,
                                                y: -110,
                                                shape: 'squarepin',
                                                width : 16
                                            }]
                                });




                        },
                        scope: this
                    });

                            }




                    break;
                default:
                    console.log(hash);
                    break;
            }
        },this);
    },

    printHola: function() {
        console.log('hola mundo');
    },

    showUncorrected: function() {
        MyApp.app.chart.series[0].setData([]);
        MyApp.app.chart.series[1].setData([]);
        MyApp.app.chart.series[2].setData([]);
        MyApp.app.chart.series[3].setData([]);
        MyApp.app.chart.series[4].setData([]);
        MyApp.app.chart.series[5].setData([]);
        if(MyApp.app.IsCandle){
            MyApp.app.chart.series[0].setData(MyApp.app.data[0]);
            MyApp.app.chart.series[1].setData([]);
        }else{
            MyApp.app.chart.series[0].setData([]);
            MyApp.app.chart.series[1].setData(MyApp.app.data[0]);
        }
    },

    showPressure: function() {
        MyApp.app.chart.series[0].setData([]);
        MyApp.app.chart.series[1].setData([]);
        MyApp.app.chart.series[2].setData([]);
        MyApp.app.chart.series[3].setData([]);
        MyApp.app.chart.series[4].setData([]);
        MyApp.app.chart.series[5].setData([]);
        if(MyApp.app.IsCandle){
            MyApp.app.chart.series[2].setData(MyApp.app.data[1]);
            MyApp.app.chart.series[3].setData([]);
        }else{
            MyApp.app.chart.series[2].setData([]);
            MyApp.app.chart.series[3].setData(MyApp.app.data[1]);
        }
    },

    showEfficiency: function() {
        MyApp.app.chart.series[0].setData([]);
        MyApp.app.chart.series[1].setData([]);
        MyApp.app.chart.series[2].setData([]);
        MyApp.app.chart.series[3].setData([]);
        MyApp.app.chart.series[4].setData([]);
        MyApp.app.chart.series[5].setData([]);
        if(MyApp.app.IsCandle){
            MyApp.app.chart.series[4].setData(MyApp.app.data[2]);
            MyApp.app.chart.series[5].setData([]);
        }else{
            MyApp.app.chart.series[4].setData([]);
            MyApp.app.chart.series[5].setData(MyApp.app.data[2]);
        }
    }

});
