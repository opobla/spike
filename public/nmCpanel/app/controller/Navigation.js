/*
 * File: app/controller/Navigation.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Navigation', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.History'
    ],

    refs: [
        {
            ref: 'SpikeChartPanel',
            selector: '#SpikeChartPanel'
        },
        {
            ref: 'SpikeChart2Panel',
            selector: '#SpikeChart2Panel'
        },
        {
            ref: 'SpikeStatPanel',
            selector: '#SpikeStatPanel'
        },
        {
            ref: 'OtherModulePanel',
            selector: '#OtherModulePanel'
        },
        {
            ref: 'navigationPanel',
            selector: '#NavigationPanel'
        }
    ],

    onLaunch: function() {
        Ext.History.init();

        Ext.History.on('change',function (hash){
            aux=hash.split('/');

            switch(aux[0]){
                case 'SpikeChart':
                    this.getNavigationPanel().getLayout().setActiveItem(this.getSpikeChartPanel());
                        switch(aux[1]){
                            case undefined:
                                break;
                            case 'Uncorrected':
                                this.showUncorrected();
                                break;
                            case 'Pressure':
                                this.showPressure();
                                break;
                            case 'Efficiency':
                                this.showEfficiency();
                                break;
                            default:
                                console.log('Chart--> '+hash);
                        }
                    break;
                case 'SpikeChart2':
                    this.getNavigationPanel().getLayout().setActiveItem(this.getSpikeChart2Panel());

                    if (!MyApp.app.IsCandle){
                        MyApp.app.chart2.showLoading('Loading data from server...');
                        Ext.Ajax.request({
                            url: 'http://localhost/apiv1/CALM/nmdadb/binTable/intervalHS/'+Math.round(MyApp.app.chart.xAxis[0].min/1000)+'/'+Math.round(MyApp.app.chart.xAxis[0].max/1000),
                            success: function(response){
                                var text = response.responseText;
                                data=Ext.JSON.decode(text);

                                for (var i=0;i<=17;i++){
                                    MyApp.app.chart2.series[i].setData(data[i]);
                                }

                                MyApp.app.chart2.hideLoading();
                                MyApp.app.chart2.hideLoading();

                            },
                            scope: this
                        });
                    }else{
                        for (var i=0;i<=17;i++){
                            MyApp.app.chart2.series[i].setData(null);
                        }
                    }
                    break;
                case 'SpikeStat':
                    this.getNavigationPanel().getLayout().setActiveItem(this.getSpikeStatPanel());
                    break;
                case 'OtherModule':
                    this.getNavigationPanel().getLayout().setActiveItem(this.getOtherModulePanel());
                    break;
                default:
                    console.log(hash);
                    break;
            }
        },this);
    },

    printHola: function() {
        console.log('hola mundo');
    },

    showUncorrected: function() {
        MyApp.app.chart.series[0].setData([]);
        MyApp.app.chart.series[1].setData([]);
        MyApp.app.chart.series[2].setData([]);
        MyApp.app.chart.series[3].setData([]);
        MyApp.app.chart.series[4].setData([]);
        MyApp.app.chart.series[5].setData([]);
        if(MyApp.app.IsCandle){
            MyApp.app.chart.series[0].setData(MyApp.app.data[0]);
            MyApp.app.chart.series[1].setData([]);
        }else{
            MyApp.app.chart.series[0].setData([]);
            MyApp.app.chart.series[1].setData(MyApp.app.data[0]);
        }
    },

    showPressure: function() {
        MyApp.app.chart.series[0].setData([]);
        MyApp.app.chart.series[1].setData([]);
        MyApp.app.chart.series[2].setData([]);
        MyApp.app.chart.series[3].setData([]);
        MyApp.app.chart.series[4].setData([]);
        MyApp.app.chart.series[5].setData([]);
        if(MyApp.app.IsCandle){
            MyApp.app.chart.series[2].setData(MyApp.app.data[1]);
            MyApp.app.chart.series[3].setData([]);
        }else{
            MyApp.app.chart.series[2].setData([]);
            MyApp.app.chart.series[3].setData(MyApp.app.data[1]);
        }
    },

    showEfficiency: function() {
        MyApp.app.chart.series[0].setData([]);
        MyApp.app.chart.series[1].setData([]);
        MyApp.app.chart.series[2].setData([]);
        MyApp.app.chart.series[3].setData([]);
        MyApp.app.chart.series[4].setData([]);
        MyApp.app.chart.series[5].setData([]);
        if(MyApp.app.IsCandle){
            MyApp.app.chart.series[4].setData(MyApp.app.data[2]);
            MyApp.app.chart.series[5].setData([]);
        }else{
            MyApp.app.chart.series[4].setData([]);
            MyApp.app.chart.series[5].setData(MyApp.app.data[2]);
        }
    }

});
